# Vinicio S. Flores for OMURA Data Architect and Engineer POC
# Under MIT License
# All Ports: Exposed Kafka (9092), Connect (8083), Postgres (5432), Mongo (27017) and our Quarkus app (8080).

version: '3.8'
services:
  # 1) Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  # 2) Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # 3) Postgres (for Debezium source)
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: omura
      POSTGRES_USER: omura_user
      POSTGRES_PASSWORD: omura_pass
    ports:
      - "5432:5432"
    # Healthchecks: Give PostgreSQL and Mongo time to come up before Kafka Connect tries to use them.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omura_user"]
      interval: 10s
      retries: 5

  # 4) MongoDB (for Debezium sink)
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5

  # 5) Kafka Connect with autoâ€‘deploy of Debezium connectors
  connect:
    build:
      context: .
      dockerfile: connect/Dockerfile
    image: my-connect:2.1
    depends_on:
      - zookeeper
      - kafka
      - postgres
      - mongodb
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      # Allow Debezium to find Postgres JDBC driver
      CLASSPATH: /kafka/connect/jars/*
    # Command hack: Run in background the default entrypoint with ampersand 
    # Poll the REST API until it responds 
    # Then curl both connectors 
    # Finally foreground Connect so its logs stay in the stdout terminal.
    command: >
      sh -c "
        # start connect in background
        /docker-entrypoint.sh connect &
        # wait for Connect REST to be ready
        until curl -s http://localhost:8083/connectors ; do
          echo 'Waiting for Kafka Connect...' && sleep 5
        done
        # POST the two connector configs
        curl -X POST -H 'Content-Type: application/json' http://localhost:8083/connectors -d @/kafka/connectors/debezium-connector-postgres.json
        curl -X POST -H 'Content-Type: application/json' http://localhost:8083/connectors -d @/kafka/connectors/mongo-sink-connector.json
        # bring connect to foreground
        fg
      "

  # 6) Your Quarkus application
  quarkus-app:
    build: .
    image: quarkus-app:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_URL: jdbc:postgresql://postgres:5432/omura
      POSTGRES_USER: omura_user
      POSTGRES_PASSWORD: omura_pass
      MONGO_URI: mongodb://mongodb:27017/omura
