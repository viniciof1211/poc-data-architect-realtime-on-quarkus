# Vinicio S. Flores for OMURA Data Architect and Engineer POC
# Under MIT License
# All Ports: Exposed Kafka (9092), Connect (8083), Postgres (5432), Mongo (27017), Python Health API (8080), Quarkus App (8081)

version: '3.8'
services:
  # 1) Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - omura-network

  # 2) Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - omura-network

  # 3) Postgres (for Debezium source)
  postgres:
    image: postgres:14
    environment:
      POSTGRES_DB: omura
      POSTGRES_USER: omura_user
      POSTGRES_PASSWORD: omura_pass
      # Enable logical replication for Debezium
      POSTGRES_INITDB_ARGS: "-c wal_level=logical -c max_wal_senders=1 -c max_replication_slots=1"
    command: ["postgres", "-c", "wal_level=logical", "-c", "max_wal_senders=1", "-c", "max_replication_slots=1"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omura_user"]
      interval: 10s
      retries: 5
    networks:
      - omura-network

  # 4) MongoDB (for Debezium sink)
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      start_period: 40s
    networks:
      - omura-network

  # 5) Kafka Connect with auto-deploy of Debezium connectors
  connect:
    build:
      context: .
      dockerfile: connect/Dockerfile
    image: my-connect:2.1
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "connect-configs"
      OFFSET_STORAGE_TOPIC: "connect-offsets"
      STATUS_STORAGE_TOPIC: "connect-status"
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      CLASSPATH: /kafka/connect/jars/*
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
    networks:
      - omura-network
    command: >
      sh -c "
        # Start connect in background
        /docker-entrypoint.sh start &
        CONNECT_PID=$$!
        
        # Wait for Connect REST API to be ready
        echo 'Waiting for Kafka Connect to start...'
        until curl -s http://localhost:8083/connectors > /dev/null 2>&1; do
          echo 'Still waiting for Kafka Connect...'
          sleep 5
        done
        
        echo 'Kafka Connect is ready. Deploying connectors...'
        
        # Deploy PostgreSQL source connector
        curl -X POST -H 'Content-Type: application/json' \
          http://localhost:8083/connectors \
          -d @/kafka/connectors/debezium-connector-postgres.json
        
        # Deploy MongoDB sink connector  
        curl -X POST -H 'Content-Type: application/json' \
          http://localhost:8083/connectors \
          -d @/kafka/connectors/mongo-sink-connector.json
        
        echo 'Connectors deployed successfully!'
        
        # Bring connect process to foreground
        wait $$CONNECT_PID
      "

  # 6) Python Health Monitoring App
  python-health-app:
    build:
      context: .
      dockerfile: Dockerfile.pyops
    image: python-health-app:latest
    depends_on:
      - kafka
      - postgres
      - mongodb
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      POSTGRES_URL: postgresql://omura_user:omura_pass@postgres:5432/omura
      POSTGRES_USER: omura_user
      POSTGRES_PASSWORD: omura_pass
      MONGO_URI: mongodb://mongodb:27017/omura
    networks:
      - omura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 7) Quarkus Main Application
  quarkus-app:
    build:
      context: ./quarkus-app
      dockerfile: ../Dockerfile
    image: quarkus-app:latest
    depends_on:
      - kafka
      - postgres
      - mongodb
      - python-health-app
    ports:
      - "8081:8080"
    environment:
      # Kafka configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      
      # Database configurations
      QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://postgres:5432/omura
      QUARKUS_DATASOURCE_USERNAME: omura_user
      QUARKUS_DATASOURCE_PASSWORD: omura_pass
      
      # MongoDB configuration
      QUARKUS_MONGODB_CONNECTION_STRING: mongodb://mongodb:27017/omura
      
      # Reactive Messaging Kafka
      MP_MESSAGING_INCOMING_DATA_EVENTS_BOOTSTRAP_SERVERS: kafka:9092
      MP_MESSAGING_OUTGOING_PROCESSED_EVENTS_BOOTSTRAP_SERVERS: kafka:9092
      
      # Health monitoring service URL
      HEALTH_SERVICE_URL: http://python-health-app:8080
    networks:
      - omura-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  omura-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: